<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swagger_Test</name>
    </assembly>
    <members>
        <member name="M:Swagger_Test.Controllers.ApiExplorerController.Get">
             <summary>
             Testing the summary on the ApiExplorerController
             </summary>
            
             <remarks>
             Testing the description on the ApiExplorerController
             This is a second line
             Here is a link to <a href="https://github.com/heldersepu">my GitHub profile</a>
             <br/>
             Some HTML styling: <b>BOLD</b> <i>italics</i>
             <ul>
             <li>Item one</li>
             <li>Item two</li>
             </ul>
             <pre>Text in a pre element</pre>
            
             <h1>Header1</h1>
             <h2>Header2</h2>
             <h3>Header3</h3>
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Get1(System.Collections.Generic.List{System.String})">
            <summary>Get1 ##Get1</summary>
             <remarks>
             Testing Markdown
             *Italic*
             **Bold**
             # Heading 1
             ## Heading 2
             [Link](http://a.com)
             * List abc
             * List def
             * List ghi
            
             > Blockquote
             `Inline code` with backticks
             Horizontal Rule
             ---
             Block1 Line1
             Block1 Line2
            
             Block2 Line1
             Block2 Line2
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Get2(System.Collections.Generic.List{System.Int32})">
            <summary>Get2 `Get2`</summary>
             <remarks>
             HelloWorld
             <pre>{
                 "demo": "val",
                 "demo2": "hello"
             }</pre>
             </remarks>
             <param name="p">list of integers</param>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Get3(System.Collections.Generic.List{Swagger_Test.Models.Location})">
            <summary>Get3 **Get3**</summary>
             <remarks>
             <a href="#Int64Post">See also the Int64 Post</a>
             <a href="#/IntParam/IntParam_Get">See also the IntParam Get</a>
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Get3(System.String)">
            <summary>
            Getting a sample json as param
            </summary>
            <param name="locations">[{Lat:1,Lon:2},{Lat:4,Lon:5}]</param>
            <returns></returns>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Post(Swagger_Test.Controllers.Arrays)">
            <summary>Post</summary>
             <remarks>
             Testing Markdown table
             | a | b | c | d | e |
             |---|---|---|---|---|
             | 3 | 0 | 7 | 4 | 1 |
             | 4 | 1 | 8 | 5 | 2 |
             | 5 | 2 | 9 | 6 | 3 |
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.ArrayTestController.Put(Swagger_Test.Controllers.Arrays)">
            <summary>Put</summary>
             <remarks>
             ### This is a list
             - Item one
             - Item 2
               - Sub item 1
               - Sub item 2
             - Item 3
             </remarks>
        </member>
        <member name="F:Swagger_Test.Controllers.Arrays.array1">
            <summary>Test</summary>
        </member>
        <member name="F:Swagger_Test.Controllers.Arrays.array4">
            <summary>List of Companies</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Data.integ">
            <summary>Sample integer</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Data.doub">
            <summary>Sample double</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Data.boolea">
            <summary>Sample boolean</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Data.guid">
            <summary>Sample guid</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Data.date">
            <summary>Sample DateTime</summary>
        </member>
        <member name="M:Swagger_Test.Controllers.BigStringController.Get(System.Int32)">
            <remarks>
            <h2>Testing html table</h2>
            <table border="1">
                <tr>
                    <td colspan="3"><span class="method">ONE</span></td>
                </tr>
                <tr>
                    <td>ABC11</td>
                    <td>ABC22</td>
                    <td>ABC33</td>
                </tr>
            </table>
            <img src="https://yuml.me/diagram/class/%5BSupplier%7Bbg:orange%7D%5D,%5BSupplier%5D-0..1%3E%5BAddress%5D,%5BSupplier%5D" />
            <img src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==" alt="Red dot" />
            </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.LongProcessingController.Get(System.Int32)">
            <summary>
            This action will put the thread to sleep for the given amount of seconds.
            </summary>
            <param name="seconds">How many seconds to sleep</param>
            <returns>The provided seconds</returns>
        </member>
        <member name="M:Swagger_Test.Controllers.Blob`1.GetBad(System.Nullable{System.Int32})">
            <summary> Get a Bad Blob </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.Blob`1.PostOk(System.Int32)">
            <summary> Get an Ok Blob </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.Blob`1.Put(Swagger_Test.Controllers.AnotherFoo{`0})">
            <summary> Template object test </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.CompanyController.Get">
             <remarks>
             ## TESTING MARKDOWN TABLES
             ### start table
            
             | Tables        | Are           | Cool  |
             | ------------- |:-------------:| -----:|
             | col 3 is      | right-aligned | $1600 |
             | col 2 is      | centered      |   $12 |
             | zebra stripes | are neat      |    $1 |
            
             ### end table
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.CompanyController.Get2(Swagger_Test.Company)">
            <summary>
            GET Echo test of company
            </summary>
            <param name="c">company to echo</param>
            <returns>Returns given company</returns>
        </member>
        <member name="M:Swagger_Test.Controllers.CompanyController.Post(System.Collections.Generic.IEnumerable{Swagger_Test.Company})">
            <summary>
            POST Echo test of company
            </summary>
            <param name="companies">companies to echo</param>
            <returns>Returns given companies</returns>
        </member>
        <member name="F:Swagger_Test.Controllers.TestEnum.id">
            <summary>Everything needs an ID.</summary>
        </member>
        <member name="F:Swagger_Test.Controllers.TestEnum.shift_day_off_rule">
            <summary>
            <ul>
            <li>None = 0,       // DayOffNotRequired</li>
            <li>OffAfter = 1,   // DayOffAfter next is off</li>
            <li>OffBefore = -1, // DayOffBefore previous is off</li>
            <li>InAfter = 3     // DayInAfter next cannot be off</li>
            </ul>
            </summary>
        </member>
        <member name="T:Swagger_Test.Controllers.MyData">
            <summary>My super duper data</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.MyData.id">
            <summary>The unique identifier</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.MyData.name">
            <summary>Everyone needs a name</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.MyData.details">
            <summary>Details - testing anchor: <a href="?filter=TestPost">TestPost</a></summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Feature.Title">
            <summary>We all need a Title</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.ImageFeature.ImageUrl">
            <summary>Here goes your image URL</summary>
        </member>
        <member name="M:Swagger_Test.Controllers.Int64Controller.Post(Swagger_Test.Controllers.Int64Controller.Int64Data)">
            <remarks>
            <h2><a name="Int64Post">Int64 Post</a></h2>
            </remarks>
        </member>
        <member name="P:Swagger_Test.Controllers.Int64Controller.Int64Data.MyLong">
            <example>1253261109769874438</example>
        </member>
        <member name="P:Swagger_Test.Controllers.Int64Controller.Int64Data.MyInt64">
            <example>21474836470</example>
        </member>
        <member name="P:Swagger_Test.Controllers.Int64Controller.Int64Data.MyData">
            <example>1253261109769874438</example>
        </member>
        <member name="P:Swagger_Test.Controllers.Payload.Name">
            <summary>Payload Name</summary>
        </member>
        <member name="P:Swagger_Test.Controllers.Payload.Timeout">
            <summary> Timeout in ms (Range 15000 to 60000. Default set to 50000) </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.MonthTestController.Post(Swagger_Test.Models.MonthEnum)">
             <summary>
             This is a sumary.
             </summary>
             <remarks>
             This is a test:
            
                 POST /Todo
                 {
                    "id": 1,
                    "name": "Item1",
                    "isComplete": true
                 }
            
             </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.NestedEnum`1.PutEnumNull(System.Nullable{Swagger_Test.Controllers.NestedEnum{`0}.Giorno})">
            <summary> A nullable enum test </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.NestedEnum`1.DeleteEnumNonNull(Swagger_Test.Controllers.NestedEnum{`0}.Giorno)">
            <summary> A non-null enum test </summary>
        </member>
        <member name="T:Swagger_Test.Controllers.RouteTestController">
            <summary>
            Testing a controller with param in the Route
            </summary>
        </member>
        <member name="P:Swagger_Test.Controllers.DTOv2.itemid">
            <summary>Secret ID for your object</summary>
            <example>234</example>
        </member>
        <member name="P:Swagger_Test.Controllers.DTOv2.note">
            <summary>Notes about your object</summary>
            <example>MyNote</example>
        </member>
        <member name="T:Swagger_Test.Controllers.TestEnumController">
            <summary>
            Testing enums ...
            </summary>
        </member>
        <member name="M:Swagger_Test.Controllers.TestEnumController.Get(Swagger_Test.Controllers.TestEnumController.CustomEnum)">
            <summary>
            Simple GET echoing the given param
            </summary>
            <param name="value">CustomEnum</param>
            <returns>CustomEnum</returns>
        </member>
        <member name="M:Swagger_Test.Controllers.TestEnumController.Post(Swagger_Test.Controllers.TestEnumController.CustomEnum)">
            <summary>
            Test POST lorem ipsum
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            <ul>
            <li><b>Item 1</b> - description 1</li>
            <li><b>Item 2</b> - description 2</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Swagger_Test.Controllers.TestEnumController.Put(Swagger_Test.Models.ViewModelTest)">
            <summary>
             Testing a [FromUri]
            </summary>
            <param name="viewModelTest">ViewModelTest</param>
            <returns>ViewModelTest</returns>
        </member>
        <member name="T:Swagger_Test.Models.GeolocateResponse">
            <summary>
            Geolocation result
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.GeolocateResponse.CountryCode">
            <summary>
            Two-letter country code of IP address
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.CountryName">
            <summary>
            Country name of IP address
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.City">
            <summary>
            City of IP address
            </summary>
            <example>Miami</example>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.RegionCode">
            <summary>
            State/region code of IP address
            </summary>
            <example>FL</example>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.RegionName">
            <summary>
            State/region of IP address
            </summary>
            <example>Florida</example>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.ZipCode">
            <summary>
            Zip or postal code of IP address
            </summary>
            <example>33323</example>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.TimezoneStandardName">
            <summary>
            Timezone of IP address
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.Latitude">
            <summary>
            Latitude of IP address
            </summary>
            <example>25.85</example>
        </member>
        <member name="F:Swagger_Test.Models.GeolocateResponse.Longitude">
            <summary>
            Longitude of IP address
            </summary>
            <example>-80.27</example>
        </member>
        <member name="T:Swagger_Test.Models.Location">
            <summary>
            ## Geographic coordinates
            ___
            A **geographic coordinate system** is a coordinate system used in geography that enables every location on Earth to be specified by a set of numbers
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.Location.Lat">
            <summary>**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.</summary>
            <example>25.85</example>
        </member>
        <member name="P:Swagger_Test.Models.Location.Lon">
            <summary>**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.</summary>
            <example>-80.27</example>
        </member>
        <member name="P:Swagger_Test.Models.Coordinate.Elev">
            <summary>**Elevation**: is the height above or below a fixed reference point.</summary>
            <example>2.6</example>
        </member>
        <member name="P:Swagger_Test.Models.ScopeResponseModel.Id">
            <summary>
            Id of the administrative scope.
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.ScopeResponseModel.Name">
            <summary>
            Name of the administrative scope.
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.ScopeResponseModel.Description">
            <summary>
            Description of the administrative scope.
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.ScopeResponseModel.IsBuiltIn">
            <summary>
            Whether the administrative scope is built-in.
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.ScopeResponseModel.IsAllScope">
            <summary>
            Indicates the built-in "All" scope.  There will be
            exactly one scope with this property set to <c>true</c>.
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.ShiftDayOffRule.None">
            <summary>
            Shift has no day off rule.
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.ShiftDayOffRule.OffAfter">
            <summary>
            If shift with this rule is scheduled then next day must be a day off.
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.ShiftDayOffRule.OffBefore">
            <summary>
            If shift with this rule is scheduled then previous day must be a day off.
            </summary>
        </member>
        <member name="F:Swagger_Test.Models.ShiftDayOffRule.InAfter">
            <summary>
            If shift with this rule is scheduled then next day must be a work day.
            </summary>
        </member>
        <member name="T:Swagger_Test.Models.ViewModelTest">
            <summary>
            Testing POCO model
            </summary>
        </member>
        <member name="P:Swagger_Test.Models.ViewModelTest.SuperId">
            <summary>
            The super ID that will be used
            </summary>
            <example>123</example>
        </member>
        <member name="P:Swagger_Test.Models.ViewModelTest.Name">
            <summary>
            Who needs a name?
            </summary>
            <example>John Doe</example>
        </member>
        <member name="P:Swagger_Test.Models.ViewModelTest.abd">
            <example>aaabbbddd</example>
        </member>
        <member name="P:Swagger_Test.Models.ViewModelTest.xyz">
            <example>xxxyyyzzz</example>
        </member>
        <member name="P:Swagger_Test.Models.ViewModelTest.cde">
            <example>cccdddeee</example>
        </member>
        <member name="P:Swagger_Test.Company.Id">
            <summary>The Unique Company ID</summary>
            <example>123</example>
        </member>
        <member name="P:Swagger_Test.Company.Name">
            <summary>The Company Name</summary>
            <example>Acme co</example>
        </member>
        <member name="P:Swagger_Test.Company.Description">
            <summary>An optional description of the company</summary>
            <remarks>This is a good place to put additional details such as: Phone and Address </remarks>
            <example>Super duper company</example>
        </member>
        <member name="P:Swagger_Test.Company.TaxCode">
            <example>42rty</example>
        </member>
        <member name="P:Swagger_Test.Company.TaxCodeDisplayName">
            <example>Tax Code Display</example>
        </member>
    </members>
</doc>
